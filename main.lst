
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000055c  000005f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000055c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .signature    00000003  00840000  00840000  000005f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         00002124  00000000  00000000  000005f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001284  00000000  00000000  00002718  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000399c  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 85 01 	call	0x30a	; 0x30a <main>
  78:	0c 94 ac 02 	jmp	0x558	; 0x558 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_mcu>:
 *******************************************************************
 * init_mcu(void) called only once after reset.
 *******************************************************************
 */
void init_mcu(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
    int i;
    /*
     * INIT data direction register:
     */
    DDRB =  0b00000001; // LED
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	84 b9       	out	0x04, r24	; 4
    DDRC =  0b00111000; // Vacuum
  88:	88 e3       	ldi	r24, 0x38	; 56
  8a:	87 b9       	out	0x07, r24	; 7
    DDRD =  0b11100000; // Motor
  8c:	80 ee       	ldi	r24, 0xE0	; 224
  8e:	8a b9       	out	0x0a, r24	; 10
    
    PORTC = 0b00000000; // Do not enable pullup on the ADC port.
  90:	18 b8       	out	0x08, r1	; 8
    PORTD = 0b00000111; // Enable 20k pullup resistor on pinD 0,1 and 2
  92:	87 e0       	ldi	r24, 0x07	; 7
  94:	8b b9       	out	0x0b, r24	; 11
    /*
     * INIT timer registers:
     * 1MHz clock / 64 = 15,625 KHz
     * 16bit TCNT1 counter overflows every (15,625 KHz/65535) = 0.23 times per second.
     */
    TCCR1B |= ( (1<<CS10) | (1<<CS11) ); // Use prescale divided by 64.
  96:	80 91 81 00 	lds	r24, 0x0081
  9a:	83 60       	ori	r24, 0x03	; 3
  9c:	80 93 81 00 	sts	0x0081, r24
    
    /*
     * INIT ADC
     */
    ADCSRA |= (1<<ADEN);
  a0:	80 91 7a 00 	lds	r24, 0x007A
  a4:	80 68       	ori	r24, 0x80	; 128
  a6:	80 93 7a 00 	sts	0x007A, r24
    // ADMUX &= Ëœ(1 <<ADLAR);
    ADMUX = 0x00;
  aa:	10 92 7c 00 	sts	0x007C, r1
    
    
    
    // This ledsequence is to indicate power-on-reset.
    allOff();
  ae:	0e 94 90 00 	call	0x120	; 0x120 <allOff>
  b2:	c5 e0       	ldi	r28, 0x05	; 5
  b4:	d0 e0       	ldi	r29, 0x00	; 0
    for(i = 0; i < 5; i++){
        ledOn();
  b6:	0e 94 b0 00 	call	0x160	; 0x160 <ledOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	87 ea       	ldi	r24, 0xA7	; 167
  bc:	91 e6       	ldi	r25, 0x61	; 97
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <init_mcu+0x3e>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <init_mcu+0x44>
  c4:	00 00       	nop
        _delay_ms(100);
        ledOff();
  c6:	0e 94 b2 00 	call	0x164	; 0x164 <ledOff>
  ca:	87 ea       	ldi	r24, 0xA7	; 167
  cc:	91 e6       	ldi	r25, 0x61	; 97
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <init_mcu+0x4e>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <init_mcu+0x54>
  d4:	00 00       	nop
  d6:	21 97       	sbiw	r28, 0x01	; 1
    
    
    
    // This ledsequence is to indicate power-on-reset.
    allOff();
    for(i = 0; i < 5; i++){
  d8:	20 97       	sbiw	r28, 0x00	; 0
  da:	69 f7       	brne	.-38     	; 0xb6 <init_mcu+0x36>
        ledOn();
        _delay_ms(100);
        ledOff();
        _delay_ms(100);
    }
}
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <flashntimes>:
 * just reading/writing to memory registers.
 *******************************************************************
 */
void flashntimes(int n){
    int i = 0;
    for (i = 0; i < n; i++){
  e2:	18 16       	cp	r1, r24
  e4:	19 06       	cpc	r1, r25
  e6:	dc f4       	brge	.+54     	; 0x11e <flashntimes+0x3c>
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	30 e0       	ldi	r19, 0x00	; 0
    PORTC |= (1<<OUT_HEFBOOM);
}

void ledOn(void)
{
    PORTB &= ~(1<<OUT_LED);
  ec:	28 98       	cbi	0x05, 0	; 5
  ee:	4f eb       	ldi	r20, 0xBF	; 191
  f0:	54 ed       	ldi	r21, 0xD4	; 212
  f2:	61 e0       	ldi	r22, 0x01	; 1
  f4:	41 50       	subi	r20, 0x01	; 1
  f6:	50 40       	sbci	r21, 0x00	; 0
  f8:	60 40       	sbci	r22, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <flashntimes+0x12>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <flashntimes+0x1c>
  fe:	00 00       	nop
}

void ledOff(void)
{
    PORTB |= (1<<OUT_LED);
 100:	28 9a       	sbi	0x05, 0	; 5
 102:	4f e7       	ldi	r20, 0x7F	; 127
 104:	58 e3       	ldi	r21, 0x38	; 56
 106:	61 e0       	ldi	r22, 0x01	; 1
 108:	41 50       	subi	r20, 0x01	; 1
 10a:	50 40       	sbci	r21, 0x00	; 0
 10c:	60 40       	sbci	r22, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <flashntimes+0x26>
 110:	00 c0       	rjmp	.+0      	; 0x112 <flashntimes+0x30>
 112:	00 00       	nop
 * just reading/writing to memory registers.
 *******************************************************************
 */
void flashntimes(int n){
    int i = 0;
    for (i = 0; i < n; i++){
 114:	2f 5f       	subi	r18, 0xFF	; 255
 116:	3f 4f       	sbci	r19, 0xFF	; 255
 118:	28 17       	cp	r18, r24
 11a:	39 07       	cpc	r19, r25
 11c:	39 f7       	brne	.-50     	; 0xec <flashntimes+0xa>
 11e:	08 95       	ret

00000120 <allOff>:
    }
}

void motorOff(void)
{
    PORTD &= ~(1<<OUT_MOTOR_EN); // clear enable bit
 120:	5d 98       	cbi	0x0b, 5	; 11
    PORTC |= (1<<OUT_VACUUM);
}

void vacuumOff(void)
{
    PORTC &= ~(1<<OUT_VACUUM);
 122:	44 98       	cbi	0x08, 4	; 8
    PORTB &= ~(1<<OUT_LED);
}

void ledOff(void)
{
    PORTB |= (1<<OUT_LED);
 124:	28 9a       	sbi	0x05, 0	; 5
    PORTC &= ~(1<<OUT_VACUUM);
}

void hefboomUp(void)
{
    PORTC &= ~(1<<OUT_HEFBOOM);
 126:	45 98       	cbi	0x08, 5	; 8
    PORTC |= (1<<OUT_COMPRESSOR);
}

void compressorOff(void)
{
    PORTC &= ~(1<<OUT_COMPRESSOR);
 128:	43 98       	cbi	0x08, 3	; 8
 12a:	08 95       	ret

0000012c <motorTurn>:
    motorOff();
}

void motorTurn(int direction)
{
    if(direction == LEFT) {
 12c:	89 2b       	or	r24, r25
 12e:	29 f0       	breq	.+10     	; 0x13a <motorTurn+0xe>
        PORTD &= ~(1<<OUT_MOTOR2A); // Clear bit
        PORTD |= ( (1<<OUT_MOTOR_EN) | (1<<OUT_MOTOR1A) ); // Set bit
    }
    else {  // Right
        PORTD &= ~(1<<OUT_MOTOR1A);
 130:	5e 98       	cbi	0x0b, 6	; 11
        PORTD |= ( (1<<OUT_MOTOR_EN) | (1<<OUT_MOTOR2A) );
 132:	8b b1       	in	r24, 0x0b	; 11
 134:	80 6a       	ori	r24, 0xA0	; 160
 136:	8b b9       	out	0x0b, r24	; 11
 138:	08 95       	ret
}

void motorTurn(int direction)
{
    if(direction == LEFT) {
        PORTD &= ~(1<<OUT_MOTOR2A); // Clear bit
 13a:	5f 98       	cbi	0x0b, 7	; 11
        PORTD |= ( (1<<OUT_MOTOR_EN) | (1<<OUT_MOTOR1A) ); // Set bit
 13c:	8b b1       	in	r24, 0x0b	; 11
 13e:	80 66       	ori	r24, 0x60	; 96
 140:	8b b9       	out	0x0b, r24	; 11
 142:	08 95       	ret

00000144 <motorOff>:
    }
}

void motorOff(void)
{
    PORTD &= ~(1<<OUT_MOTOR_EN); // clear enable bit
 144:	5d 98       	cbi	0x0b, 5	; 11
 146:	08 95       	ret

00000148 <compressorOn>:
}

void compressorOn(void)
{
    PORTC |= (1<<OUT_COMPRESSOR);
 148:	43 9a       	sbi	0x08, 3	; 8
 14a:	08 95       	ret

0000014c <compressorOff>:
}

void compressorOff(void)
{
    PORTC &= ~(1<<OUT_COMPRESSOR);
 14c:	43 98       	cbi	0x08, 3	; 8
 14e:	08 95       	ret

00000150 <vacuumOn>:
}

void vacuumOn(void)
{
    PORTC |= (1<<OUT_VACUUM);
 150:	44 9a       	sbi	0x08, 4	; 8
 152:	08 95       	ret

00000154 <vacuumOff>:
}

void vacuumOff(void)
{
    PORTC &= ~(1<<OUT_VACUUM);
 154:	44 98       	cbi	0x08, 4	; 8
 156:	08 95       	ret

00000158 <hefboomUp>:
}

void hefboomUp(void)
{
    PORTC &= ~(1<<OUT_HEFBOOM);
 158:	45 98       	cbi	0x08, 5	; 8
 15a:	08 95       	ret

0000015c <hefboomDown>:
}

void hefboomDown(void)
{
    PORTC |= (1<<OUT_HEFBOOM);
 15c:	45 9a       	sbi	0x08, 5	; 8
 15e:	08 95       	ret

00000160 <ledOn>:
}

void ledOn(void)
{
    PORTB &= ~(1<<OUT_LED);
 160:	28 98       	cbi	0x05, 0	; 5
 162:	08 95       	ret

00000164 <ledOff>:
}

void ledOff(void)
{
    PORTB |= (1<<OUT_LED);
 164:	28 9a       	sbi	0x05, 0	; 5
 166:	08 95       	ret

00000168 <motorCountSteps>:

void motorCountSteps(int steps)
{
    uint8_t motor_steps;
    
    motor_steps = 0;
 168:	40 e0       	ldi	r20, 0x00	; 0
    do {
        // Logic 1 (no step), logic 0 (step)
        while((PIND & (1<<IN_STEPS)) ? 1: 0 ){
 16a:	49 99       	sbic	0x09, 1	; 9
 16c:	fe cf       	rjmp	.-4      	; 0x16a <motorCountSteps+0x2>
            // wait for falling edge
        }
        motor_steps++;
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	24 0f       	add	r18, r20
        if(motor_steps == steps) {
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	28 17       	cp	r18, r24
 176:	39 07       	cpc	r19, r25
 178:	71 f0       	breq	.+28     	; 0x196 <motorCountSteps+0x2e>
 17a:	e3 ec       	ldi	r30, 0xC3	; 195
 17c:	f9 e0       	ldi	r31, 0x09	; 9
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <motorCountSteps+0x16>
 182:	00 c0       	rjmp	.+0      	; 0x184 <motorCountSteps+0x1c>
 184:	00 00       	nop
            return; // Don't wait for rising edge
        }
        _delay_ms(10); // De-bounce
        while((PIND & (1<<IN_STEPS)) ? 0: 1 ){
 186:	49 9b       	sbis	0x09, 1	; 9
 188:	fe cf       	rjmp	.-4      	; 0x186 <motorCountSteps+0x1e>
            // wait for rising edge
        }
        motor_steps++;
 18a:	4e 5f       	subi	r20, 0xFE	; 254
        if(motor_steps == steps){
 18c:	24 2f       	mov	r18, r20
 18e:	30 e0       	ldi	r19, 0x00	; 0
            return; 
        }
        //_delay_ms(1); // De-bounce
    } while (motor_steps < steps);
 190:	28 17       	cp	r18, r24
 192:	39 07       	cpc	r19, r25
 194:	54 f3       	brlt	.-44     	; 0x16a <motorCountSteps+0x2>
 196:	08 95       	ret

00000198 <motorTurnSteps>:
    hefboomUp();
    compressorOff();
}


void motorTurnSteps(int direction, int steps){
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	eb 01       	movw	r28, r22
    motorTurn(direction);
 19e:	0e 94 96 00 	call	0x12c	; 0x12c <motorTurn>
    motorCountSteps(steps);
 1a2:	ce 01       	movw	r24, r28
 1a4:	0e 94 b4 00 	call	0x168	; 0x168 <motorCountSteps>
    }
}

void motorOff(void)
{
    PORTD &= ~(1<<OUT_MOTOR_EN); // clear enable bit
 1a8:	5d 98       	cbi	0x0b, 5	; 11

void motorTurnSteps(int direction, int steps){
    motorTurn(direction);
    motorCountSteps(steps);
    motorOff();
}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <readColorSensor>:
 1b0:	cf 92       	push	r12
 1b2:	df 92       	push	r13
 1b4:	ef 92       	push	r14
 1b6:	ff 92       	push	r15
 1b8:	80 91 7a 00 	lds	r24, 0x007A
 1bc:	80 64       	ori	r24, 0x40	; 64
 1be:	80 93 7a 00 	sts	0x007A, r24
 1c2:	80 91 7a 00 	lds	r24, 0x007A
 1c6:	86 fd       	sbrc	r24, 6
 1c8:	fc cf       	rjmp	.-8      	; 0x1c2 <readColorSensor+0x12>
 1ca:	60 91 78 00 	lds	r22, 0x0078
 1ce:	80 91 79 00 	lds	r24, 0x0079
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	78 2b       	or	r23, r24
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 47 02 	call	0x48e	; 0x48e <__floatunsisf>
 1de:	6b 01       	movw	r12, r22
 1e0:	7c 01       	movw	r14, r24
 1e2:	2e ea       	ldi	r18, 0xAE	; 174
 1e4:	37 e0       	ldi	r19, 0x07	; 7
 1e6:	41 e0       	ldi	r20, 0x01	; 1
 1e8:	54 e4       	ldi	r21, 0x44	; 68
 1ea:	0e 94 43 02 	call	0x486	; 0x486 <__cmpsf2>
 1ee:	18 16       	cp	r1, r24
 1f0:	74 f1       	brlt	.+92     	; 0x24e <readColorSensor+0x9e>
 1f2:	28 98       	cbi	0x05, 0	; 5
 1f4:	2f eb       	ldi	r18, 0xBF	; 191
 1f6:	34 ed       	ldi	r19, 0xD4	; 212
 1f8:	41 e0       	ldi	r20, 0x01	; 1
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	30 40       	sbci	r19, 0x00	; 0
 1fe:	40 40       	sbci	r20, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <readColorSensor+0x4a>
 202:	00 c0       	rjmp	.+0      	; 0x204 <readColorSensor+0x54>
 204:	00 00       	nop
 206:	28 9a       	sbi	0x05, 0	; 5
 208:	8f e7       	ldi	r24, 0x7F	; 127
 20a:	98 e3       	ldi	r25, 0x38	; 56
 20c:	21 e0       	ldi	r18, 0x01	; 1
 20e:	81 50       	subi	r24, 0x01	; 1
 210:	90 40       	sbci	r25, 0x00	; 0
 212:	20 40       	sbci	r18, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <readColorSensor+0x5e>
 216:	00 c0       	rjmp	.+0      	; 0x218 <readColorSensor+0x68>
 218:	00 00       	nop
 21a:	28 98       	cbi	0x05, 0	; 5
 21c:	3f eb       	ldi	r19, 0xBF	; 191
 21e:	44 ed       	ldi	r20, 0xD4	; 212
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	31 50       	subi	r19, 0x01	; 1
 224:	40 40       	sbci	r20, 0x00	; 0
 226:	80 40       	sbci	r24, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <readColorSensor+0x72>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <readColorSensor+0x7c>
 22c:	00 00       	nop
 22e:	28 9a       	sbi	0x05, 0	; 5
 230:	9f e7       	ldi	r25, 0x7F	; 127
 232:	28 e3       	ldi	r18, 0x38	; 56
 234:	31 e0       	ldi	r19, 0x01	; 1
 236:	91 50       	subi	r25, 0x01	; 1
 238:	20 40       	sbci	r18, 0x00	; 0
 23a:	30 40       	sbci	r19, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <readColorSensor+0x86>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <readColorSensor+0x90>
 240:	00 00       	nop
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	df 90       	pop	r13
 24a:	cf 90       	pop	r12
 24c:	08 95       	ret
 24e:	2c e5       	ldi	r18, 0x5C	; 92
 250:	3f e8       	ldi	r19, 0x8F	; 143
 252:	42 e0       	ldi	r20, 0x02	; 2
 254:	54 e4       	ldi	r21, 0x44	; 68
 256:	c7 01       	movw	r24, r14
 258:	b6 01       	movw	r22, r12
 25a:	0e 94 a8 02 	call	0x550	; 0x550 <__gesf2>
 25e:	87 ff       	sbrs	r24, 7
 260:	2a c0       	rjmp	.+84     	; 0x2b6 <readColorSensor+0x106>
 262:	27 e6       	ldi	r18, 0x67	; 103
 264:	36 ee       	ldi	r19, 0xE6	; 230
 266:	43 e1       	ldi	r20, 0x13	; 19
 268:	54 e4       	ldi	r21, 0x44	; 68
 26a:	c7 01       	movw	r24, r14
 26c:	b6 01       	movw	r22, r12
 26e:	0e 94 a8 02 	call	0x550	; 0x550 <__gesf2>
 272:	18 16       	cp	r1, r24
 274:	0c f0       	brlt	.+2      	; 0x278 <readColorSensor+0xc8>
 276:	43 c0       	rjmp	.+134    	; 0x2fe <readColorSensor+0x14e>
 278:	83 e0       	ldi	r24, 0x03	; 3
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	28 98       	cbi	0x05, 0	; 5
 27e:	2f eb       	ldi	r18, 0xBF	; 191
 280:	34 ed       	ldi	r19, 0xD4	; 212
 282:	41 e0       	ldi	r20, 0x01	; 1
 284:	21 50       	subi	r18, 0x01	; 1
 286:	30 40       	sbci	r19, 0x00	; 0
 288:	40 40       	sbci	r20, 0x00	; 0
 28a:	e1 f7       	brne	.-8      	; 0x284 <readColorSensor+0xd4>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <readColorSensor+0xde>
 28e:	00 00       	nop
 290:	28 9a       	sbi	0x05, 0	; 5
 292:	2f e7       	ldi	r18, 0x7F	; 127
 294:	38 e3       	ldi	r19, 0x38	; 56
 296:	41 e0       	ldi	r20, 0x01	; 1
 298:	21 50       	subi	r18, 0x01	; 1
 29a:	30 40       	sbci	r19, 0x00	; 0
 29c:	40 40       	sbci	r20, 0x00	; 0
 29e:	e1 f7       	brne	.-8      	; 0x298 <readColorSensor+0xe8>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <readColorSensor+0xf2>
 2a2:	00 00       	nop
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	00 97       	sbiw	r24, 0x00	; 0
 2a8:	49 f7       	brne	.-46     	; 0x27c <readColorSensor+0xcc>
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	ff 90       	pop	r15
 2ae:	ef 90       	pop	r14
 2b0:	df 90       	pop	r13
 2b2:	cf 90       	pop	r12
 2b4:	08 95       	ret
 2b6:	2d ec       	ldi	r18, 0xCD	; 205
 2b8:	3c ec       	ldi	r19, 0xCC	; 204
 2ba:	4e e0       	ldi	r20, 0x0E	; 14
 2bc:	54 e4       	ldi	r21, 0x44	; 68
 2be:	c7 01       	movw	r24, r14
 2c0:	b6 01       	movw	r22, r12
 2c2:	0e 94 43 02 	call	0x486	; 0x486 <__cmpsf2>
 2c6:	87 ff       	sbrs	r24, 7
 2c8:	cc cf       	rjmp	.-104    	; 0x262 <readColorSensor+0xb2>
 2ca:	28 98       	cbi	0x05, 0	; 5
 2cc:	4f eb       	ldi	r20, 0xBF	; 191
 2ce:	84 ed       	ldi	r24, 0xD4	; 212
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	41 50       	subi	r20, 0x01	; 1
 2d4:	80 40       	sbci	r24, 0x00	; 0
 2d6:	90 40       	sbci	r25, 0x00	; 0
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <readColorSensor+0x122>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <readColorSensor+0x12c>
 2dc:	00 00       	nop
 2de:	28 9a       	sbi	0x05, 0	; 5
 2e0:	2f e7       	ldi	r18, 0x7F	; 127
 2e2:	38 e3       	ldi	r19, 0x38	; 56
 2e4:	41 e0       	ldi	r20, 0x01	; 1
 2e6:	21 50       	subi	r18, 0x01	; 1
 2e8:	30 40       	sbci	r19, 0x00	; 0
 2ea:	40 40       	sbci	r20, 0x00	; 0
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <readColorSensor+0x136>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <readColorSensor+0x140>
 2f0:	00 00       	nop
 2f2:	83 e0       	ldi	r24, 0x03	; 3
 2f4:	ff 90       	pop	r15
 2f6:	ef 90       	pop	r14
 2f8:	df 90       	pop	r13
 2fa:	cf 90       	pop	r12
 2fc:	08 95       	ret
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	ff 90       	pop	r15
 302:	ef 90       	pop	r14
 304:	df 90       	pop	r13
 306:	cf 90       	pop	r12
 308:	08 95       	ret

0000030a <main>:
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	1f 92       	push	r1
 310:	cd b7       	in	r28, 0x3d	; 61
 312:	de b7       	in	r29, 0x3e	; 62
 314:	0e 94 40 00 	call	0x80	; 0x80 <init_mcu>
 318:	48 9b       	sbis	0x09, 0	; 9
 31a:	fe cf       	rjmp	.-4      	; 0x318 <main+0xe>
 31c:	0e 94 a4 00 	call	0x148	; 0x148 <compressorOn>
 320:	4a 99       	sbic	0x09, 2	; 9
 322:	74 c0       	rjmp	.+232    	; 0x40c <main+0x102>
 324:	0e 94 a2 00 	call	0x144	; 0x144 <motorOff>
 328:	0e 94 ae 00 	call	0x15c	; 0x15c <hefboomDown>
 32c:	8f e4       	ldi	r24, 0x4F	; 79
 32e:	93 ec       	ldi	r25, 0xC3	; 195
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <main+0x26>
 334:	00 c0       	rjmp	.+0      	; 0x336 <main+0x2c>
 336:	00 00       	nop
 338:	0e 94 a8 00 	call	0x150	; 0x150 <vacuumOn>
 33c:	9f e7       	ldi	r25, 0x7F	; 127
 33e:	e8 e3       	ldi	r30, 0x38	; 56
 340:	f1 e0       	ldi	r31, 0x01	; 1
 342:	91 50       	subi	r25, 0x01	; 1
 344:	e0 40       	sbci	r30, 0x00	; 0
 346:	f0 40       	sbci	r31, 0x00	; 0
 348:	e1 f7       	brne	.-8      	; 0x342 <main+0x38>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <main+0x42>
 34c:	00 00       	nop
 34e:	0e 94 ac 00 	call	0x158	; 0x158 <hefboomUp>
 352:	2f e5       	ldi	r18, 0x5F	; 95
 354:	3a ee       	ldi	r19, 0xEA	; 234
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	21 50       	subi	r18, 0x01	; 1
 35a:	30 40       	sbci	r19, 0x00	; 0
 35c:	80 40       	sbci	r24, 0x00	; 0
 35e:	e1 f7       	brne	.-8      	; 0x358 <main+0x4e>
 360:	00 c0       	rjmp	.+0      	; 0x362 <main+0x58>
 362:	00 00       	nop
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 96 00 	call	0x12c	; 0x12c <motorTurn>
 36c:	9f e5       	ldi	r25, 0x5F	; 95
 36e:	e7 e6       	ldi	r30, 0x67	; 103
 370:	f1 e0       	ldi	r31, 0x01	; 1
 372:	91 50       	subi	r25, 0x01	; 1
 374:	e0 40       	sbci	r30, 0x00	; 0
 376:	f0 40       	sbci	r31, 0x00	; 0
 378:	e1 f7       	brne	.-8      	; 0x372 <main+0x68>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <main+0x72>
 37c:	00 00       	nop
 37e:	0e 94 a2 00 	call	0x144	; 0x144 <motorOff>
 382:	0e 94 ae 00 	call	0x15c	; 0x15c <hefboomDown>
 386:	2f e7       	ldi	r18, 0x7F	; 127
 388:	3a e1       	ldi	r19, 0x1A	; 26
 38a:	86 e0       	ldi	r24, 0x06	; 6
 38c:	21 50       	subi	r18, 0x01	; 1
 38e:	30 40       	sbci	r19, 0x00	; 0
 390:	80 40       	sbci	r24, 0x00	; 0
 392:	e1 f7       	brne	.-8      	; 0x38c <main+0x82>
 394:	00 c0       	rjmp	.+0      	; 0x396 <main+0x8c>
 396:	00 00       	nop
 398:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <readColorSensor>
 39c:	89 83       	std	Y+1, r24	; 0x01
 39e:	0e 94 ac 00 	call	0x158	; 0x158 <hefboomUp>
 3a2:	9f e7       	ldi	r25, 0x7F	; 127
 3a4:	e8 e3       	ldi	r30, 0x38	; 56
 3a6:	f1 e0       	ldi	r31, 0x01	; 1
 3a8:	91 50       	subi	r25, 0x01	; 1
 3aa:	e0 40       	sbci	r30, 0x00	; 0
 3ac:	f0 40       	sbci	r31, 0x00	; 0
 3ae:	e1 f7       	brne	.-8      	; 0x3a8 <main+0x9e>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <main+0xa8>
 3b2:	00 00       	nop
 3b4:	89 81       	ldd	r24, Y+1	; 0x01
 3b6:	82 30       	cpi	r24, 0x02	; 2
 3b8:	09 f4       	brne	.+2      	; 0x3bc <main+0xb2>
 3ba:	59 c0       	rjmp	.+178    	; 0x46e <main+0x164>
 3bc:	83 30       	cpi	r24, 0x03	; 3
 3be:	09 f4       	brne	.+2      	; 0x3c2 <main+0xb8>
 3c0:	44 c0       	rjmp	.+136    	; 0x44a <main+0x140>
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	81 f1       	breq	.+96     	; 0x426 <main+0x11c>
 3c6:	0e 94 ae 00 	call	0x15c	; 0x15c <hefboomDown>
 3ca:	9f e7       	ldi	r25, 0x7F	; 127
 3cc:	e8 e3       	ldi	r30, 0x38	; 56
 3ce:	f1 e0       	ldi	r31, 0x01	; 1
 3d0:	91 50       	subi	r25, 0x01	; 1
 3d2:	e0 40       	sbci	r30, 0x00	; 0
 3d4:	f0 40       	sbci	r31, 0x00	; 0
 3d6:	e1 f7       	brne	.-8      	; 0x3d0 <main+0xc6>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <main+0xd0>
 3da:	00 00       	nop
 3dc:	0e 94 aa 00 	call	0x154	; 0x154 <vacuumOff>
 3e0:	8f e1       	ldi	r24, 0x1F	; 31
 3e2:	9e e4       	ldi	r25, 0x4E	; 78
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <main+0xda>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <main+0xe0>
 3ea:	00 00       	nop
 3ec:	0e 94 ac 00 	call	0x158	; 0x158 <hefboomUp>
 3f0:	9f e5       	ldi	r25, 0x5F	; 95
 3f2:	ea ee       	ldi	r30, 0xEA	; 234
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	91 50       	subi	r25, 0x01	; 1
 3f8:	e0 40       	sbci	r30, 0x00	; 0
 3fa:	f0 40       	sbci	r31, 0x00	; 0
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <main+0xec>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <main+0xf6>
 400:	00 00       	nop
 402:	0e 94 a6 00 	call	0x14c	; 0x14c <compressorOff>
 406:	0e 94 90 00 	call	0x120	; 0x120 <allOff>
 40a:	86 cf       	rjmp	.-244    	; 0x318 <main+0xe>
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 96 00 	call	0x12c	; 0x12c <motorTurn>
 414:	83 ec       	ldi	r24, 0xC3	; 195
 416:	99 e0       	ldi	r25, 0x09	; 9
 418:	01 97       	sbiw	r24, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <main+0x10e>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <main+0x114>
 41e:	00 00       	nop
 420:	4a 99       	sbic	0x09, 2	; 9
 422:	f4 cf       	rjmp	.-24     	; 0x40c <main+0x102>
 424:	7f cf       	rjmp	.-258    	; 0x324 <main+0x1a>
 426:	64 e0       	ldi	r22, 0x04	; 4
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 cc 00 	call	0x198	; 0x198 <motorTurnSteps>
 432:	0e 94 ae 00 	call	0x15c	; 0x15c <hefboomDown>
 436:	2f e7       	ldi	r18, 0x7F	; 127
 438:	38 e3       	ldi	r19, 0x38	; 56
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	21 50       	subi	r18, 0x01	; 1
 43e:	30 40       	sbci	r19, 0x00	; 0
 440:	80 40       	sbci	r24, 0x00	; 0
 442:	e1 f7       	brne	.-8      	; 0x43c <main+0x132>
 444:	00 c0       	rjmp	.+0      	; 0x446 <main+0x13c>
 446:	00 00       	nop
 448:	c9 cf       	rjmp	.-110    	; 0x3dc <main+0xd2>
 44a:	68 e0       	ldi	r22, 0x08	; 8
 44c:	70 e0       	ldi	r23, 0x00	; 0
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	0e 94 cc 00 	call	0x198	; 0x198 <motorTurnSteps>
 456:	0e 94 ae 00 	call	0x15c	; 0x15c <hefboomDown>
 45a:	9f e7       	ldi	r25, 0x7F	; 127
 45c:	e8 e3       	ldi	r30, 0x38	; 56
 45e:	f1 e0       	ldi	r31, 0x01	; 1
 460:	91 50       	subi	r25, 0x01	; 1
 462:	e0 40       	sbci	r30, 0x00	; 0
 464:	f0 40       	sbci	r31, 0x00	; 0
 466:	e1 f7       	brne	.-8      	; 0x460 <main+0x156>
 468:	00 c0       	rjmp	.+0      	; 0x46a <main+0x160>
 46a:	00 00       	nop
 46c:	b7 cf       	rjmp	.-146    	; 0x3dc <main+0xd2>
 46e:	2f e7       	ldi	r18, 0x7F	; 127
 470:	38 e3       	ldi	r19, 0x38	; 56
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	21 50       	subi	r18, 0x01	; 1
 476:	30 40       	sbci	r19, 0x00	; 0
 478:	80 40       	sbci	r24, 0x00	; 0
 47a:	e1 f7       	brne	.-8      	; 0x474 <main+0x16a>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <main+0x174>
 47e:	00 00       	nop
 480:	66 e0       	ldi	r22, 0x06	; 6
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	e4 cf       	rjmp	.-56     	; 0x44e <main+0x144>

00000486 <__cmpsf2>:
 486:	40 d0       	rcall	.+128    	; 0x508 <__fp_cmp>
 488:	08 f4       	brcc	.+2      	; 0x48c <__cmpsf2+0x6>
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	08 95       	ret

0000048e <__floatunsisf>:
 48e:	e8 94       	clt
 490:	09 c0       	rjmp	.+18     	; 0x4a4 <__floatsisf+0x12>

00000492 <__floatsisf>:
 492:	97 fb       	bst	r25, 7
 494:	3e f4       	brtc	.+14     	; 0x4a4 <__floatsisf+0x12>
 496:	90 95       	com	r25
 498:	80 95       	com	r24
 49a:	70 95       	com	r23
 49c:	61 95       	neg	r22
 49e:	7f 4f       	sbci	r23, 0xFF	; 255
 4a0:	8f 4f       	sbci	r24, 0xFF	; 255
 4a2:	9f 4f       	sbci	r25, 0xFF	; 255
 4a4:	99 23       	and	r25, r25
 4a6:	a9 f0       	breq	.+42     	; 0x4d2 <__floatsisf+0x40>
 4a8:	f9 2f       	mov	r31, r25
 4aa:	96 e9       	ldi	r25, 0x96	; 150
 4ac:	bb 27       	eor	r27, r27
 4ae:	93 95       	inc	r25
 4b0:	f6 95       	lsr	r31
 4b2:	87 95       	ror	r24
 4b4:	77 95       	ror	r23
 4b6:	67 95       	ror	r22
 4b8:	b7 95       	ror	r27
 4ba:	f1 11       	cpse	r31, r1
 4bc:	f8 cf       	rjmp	.-16     	; 0x4ae <__floatsisf+0x1c>
 4be:	fa f4       	brpl	.+62     	; 0x4fe <__floatsisf+0x6c>
 4c0:	bb 0f       	add	r27, r27
 4c2:	11 f4       	brne	.+4      	; 0x4c8 <__floatsisf+0x36>
 4c4:	60 ff       	sbrs	r22, 0
 4c6:	1b c0       	rjmp	.+54     	; 0x4fe <__floatsisf+0x6c>
 4c8:	6f 5f       	subi	r22, 0xFF	; 255
 4ca:	7f 4f       	sbci	r23, 0xFF	; 255
 4cc:	8f 4f       	sbci	r24, 0xFF	; 255
 4ce:	9f 4f       	sbci	r25, 0xFF	; 255
 4d0:	16 c0       	rjmp	.+44     	; 0x4fe <__floatsisf+0x6c>
 4d2:	88 23       	and	r24, r24
 4d4:	11 f0       	breq	.+4      	; 0x4da <__floatsisf+0x48>
 4d6:	96 e9       	ldi	r25, 0x96	; 150
 4d8:	11 c0       	rjmp	.+34     	; 0x4fc <__floatsisf+0x6a>
 4da:	77 23       	and	r23, r23
 4dc:	21 f0       	breq	.+8      	; 0x4e6 <__floatsisf+0x54>
 4de:	9e e8       	ldi	r25, 0x8E	; 142
 4e0:	87 2f       	mov	r24, r23
 4e2:	76 2f       	mov	r23, r22
 4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <__floatsisf+0x5e>
 4e6:	66 23       	and	r22, r22
 4e8:	71 f0       	breq	.+28     	; 0x506 <__floatsisf+0x74>
 4ea:	96 e8       	ldi	r25, 0x86	; 134
 4ec:	86 2f       	mov	r24, r22
 4ee:	70 e0       	ldi	r23, 0x00	; 0
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	2a f0       	brmi	.+10     	; 0x4fe <__floatsisf+0x6c>
 4f4:	9a 95       	dec	r25
 4f6:	66 0f       	add	r22, r22
 4f8:	77 1f       	adc	r23, r23
 4fa:	88 1f       	adc	r24, r24
 4fc:	da f7       	brpl	.-10     	; 0x4f4 <__floatsisf+0x62>
 4fe:	88 0f       	add	r24, r24
 500:	96 95       	lsr	r25
 502:	87 95       	ror	r24
 504:	97 f9       	bld	r25, 7
 506:	08 95       	ret

00000508 <__fp_cmp>:
 508:	99 0f       	add	r25, r25
 50a:	00 08       	sbc	r0, r0
 50c:	55 0f       	add	r21, r21
 50e:	aa 0b       	sbc	r26, r26
 510:	e0 e8       	ldi	r30, 0x80	; 128
 512:	fe ef       	ldi	r31, 0xFE	; 254
 514:	16 16       	cp	r1, r22
 516:	17 06       	cpc	r1, r23
 518:	e8 07       	cpc	r30, r24
 51a:	f9 07       	cpc	r31, r25
 51c:	c0 f0       	brcs	.+48     	; 0x54e <__fp_cmp+0x46>
 51e:	12 16       	cp	r1, r18
 520:	13 06       	cpc	r1, r19
 522:	e4 07       	cpc	r30, r20
 524:	f5 07       	cpc	r31, r21
 526:	98 f0       	brcs	.+38     	; 0x54e <__fp_cmp+0x46>
 528:	62 1b       	sub	r22, r18
 52a:	73 0b       	sbc	r23, r19
 52c:	84 0b       	sbc	r24, r20
 52e:	95 0b       	sbc	r25, r21
 530:	39 f4       	brne	.+14     	; 0x540 <__fp_cmp+0x38>
 532:	0a 26       	eor	r0, r26
 534:	61 f0       	breq	.+24     	; 0x54e <__fp_cmp+0x46>
 536:	23 2b       	or	r18, r19
 538:	24 2b       	or	r18, r20
 53a:	25 2b       	or	r18, r21
 53c:	21 f4       	brne	.+8      	; 0x546 <__fp_cmp+0x3e>
 53e:	08 95       	ret
 540:	0a 26       	eor	r0, r26
 542:	09 f4       	brne	.+2      	; 0x546 <__fp_cmp+0x3e>
 544:	a1 40       	sbci	r26, 0x01	; 1
 546:	a6 95       	lsr	r26
 548:	8f ef       	ldi	r24, 0xFF	; 255
 54a:	81 1d       	adc	r24, r1
 54c:	81 1d       	adc	r24, r1
 54e:	08 95       	ret

00000550 <__gesf2>:
 550:	db df       	rcall	.-74     	; 0x508 <__fp_cmp>
 552:	08 f4       	brcc	.+2      	; 0x556 <__gesf2+0x6>
 554:	8f ef       	ldi	r24, 0xFF	; 255
 556:	08 95       	ret

00000558 <_exit>:
 558:	f8 94       	cli

0000055a <__stop_program>:
 55a:	ff cf       	rjmp	.-2      	; 0x55a <__stop_program>
